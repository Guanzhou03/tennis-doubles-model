// tennis court (current model is with 8 regions, later model will be 16 regions with more strategies)
//     *****
//  P1      P2
// de_ct   ad_ct
// ------+------  baseline
// |  1  |  2  |
// |-----|-----|  service line
// |  3  |  4  |
// |===========|  net. "9" is representing net error or not able to hit over to opponent court area.
// |  5  |  6  |
// |-----|-----|  service line
// |  7  |  8  |
// ------+------  baseline
// ad_ct   de_ct
//  P4      P3
//     *****

// P1 and P2 are Team1, P3 and P4 are Team2; 
// P1 and P3 are players standing at the "deuce" court when they return;
// P2 and P4 are players standing at the "ad" court when they return;

enum{t1, t2, na};  // t1: Team1, t2: Team2
enum{C, I, A};  // C: Conventional Formation, I: I-Formation, A: Australian Formation

var turn = na; // who serves current turn
var p1_form = C;  // team1 formation
var p2_form = C;  // team1 formation
var p3_form = C;  // team1 formation
var p4_form = C;  // team1 formation

var team1 = 0;  // team1 points
var team2 = 0;  // team2 points
var won = na;  // winning team
var order = [1,4,2,3];  // serving order
var points = 7;  // Max point in the tiebreak game

// formation
Formation = [turn==1]P1Formation -> pcase {
	28: C_Formation{p1_form=C} -> Skip
	8: I_Formation{p1_form=I} -> Skip
} [] [turn==2]P2Formation -> pcase {
	17: C_Formation{p2_form=C} -> Skip
	1: I_Formation{p2_form=I} -> Skip
} [] [turn==3]P3Formation -> pcase {
	10: C_Formation{p3_form=C} -> Skip
	5: I_Formation{p3_form=I} -> Skip
} [] [turn==4]P3Formation -> pcase {
	15: C_Formation{p4_form=C} -> Skip
	18: I_Formation{p4_form=I} -> Skip
};

// All possible serving orders
Orders = p1p3{order[0]=1;order[1]=3;order[2]=2;order[3]=4;turn=1} -> Skip []
		 p1p4{order[0]=1;order[1]=4;order[2]=2;order[3]=3;turn=1} -> Skip []
		 p2p3{order[0]=2;order[1]=3;order[2]=1;order[3]=4;turn=2} -> Skip []
		 p2p4{order[0]=2;order[1]=4;order[2]=1;order[3]=3;turn=2} -> Skip []
		 p3p1{order[0]=3;order[1]=1;order[2]=4;order[3]=2;turn=3} -> Skip []
		 p3p2{order[0]=3;order[1]=2;order[2]=4;order[3]=1;turn=3} -> Skip []
		 p4p1{order[0]=4;order[1]=1;order[2]=3;order[3]=2;turn=4} -> Skip []
		 p4p2{order[0]=4;order[1]=2;order[2]=3;order[3]=1;turn=4} -> Skip;

// Whoever won the toss, each team will decide who will serve first, therefore, it is modelled as general choice of 1..4
TieBreakGame = Orders; NextPt;

// Proceed to the next point
P1_Serve_P1C = [won==na && turn==1 && (team1+team2)%2==0 && p1_form==C]ReadyDeServe -> P1_DeServe_P1C [] [won==na && turn==1 && (team1+team2)%2==1 && p1_form==C]ReadyAdServe -> P1_AdServe_P1C;

P1_Serve_P1I = [won==na && turn==1 && (team1+team2)%2==0 && p1_form==I]ReadyDeServe -> P1_DeServe_P1I [] [won==na && turn==1 && (team1+team2)%2==1 && p1_form==I]ReadyAdServe -> P1_AdServe_P1I;

P2_Serve_P2C = [won==na && turn==2 && (team1+team2)%2==0 && p2_form==C]ReadyDeServe -> P2_DeServe_P2C [] [won==na && turn==2 && (team1+team2)%2==1 && p2_form==C]ReadyAdServe -> P2_AdServe_P2C;

P2_Serve_P2I = [won==na && turn==2 && (team1+team2)%2==0 && p2_form==I]ReadyDeServe -> P2_DeServe_P2I [] [won==na && turn==2 && (team1+team2)%2==1 && p2_form==I]ReadyAdServe -> P2_AdServe_P2I;

P3_Serve_P3C = [won==na && turn==3 && (team1+team2)%2==0 && p3_form==C]ReadyDeServe -> P3_DeServe_P3C [] [won==na && turn==3 && (team1+team2)%2==1 && p3_form==C]ReadyAdServe -> P3_AdServe_P3C;

P3_Serve_P3I = [won==na && turn==3 && (team1+team2)%2==0 && p3_form==I]ReadyDeServe -> P3_DeServe_P3I [] [won==na && turn==3 && (team1+team2)%2==1 && p3_form==I]ReadyAdServe -> P3_AdServe_P3I;

P4_Serve_P4C = [won==na && turn==4 && (team1+team2)%2==0 && p4_form==C]ReadyDeServe -> P4_DeServe_P4C [] [won==na && turn==4 && (team1+team2)%2==1 && p4_form==C]ReadyAdServe -> P4_AdServe_P4C;

P4_Serve_P4I = [won==na && turn==4 && (team1+team2)%2==0 && p4_form==I]ReadyDeServe -> P4_DeServe_P4I [] [won==na && turn==4 && (team1+team2)%2==1 && p4_form==I]ReadyAdServe -> P4_AdServe_P4I;

WhoServe = P1_Serve_P1C [] P2_Serve_P2C [] P3_Serve_P3C [] P4_Serve_P4C [] P1_Serve_P1I [] P2_Serve_P2I [] P3_Serve_P3I [] P4_Serve_P4I [] ([won != na] GameOver -> Skip);
NextPt = Formation; WhoServe;

// ======================================================================================================================================== \\
// Only call after serving from deuce court
#define nextServer(p) {if (order[0]==p) {turn=order[1]}
					   else {if (order[1]==p) {turn=order[2]}
					         else {if (order[2]==p) {turn=order[3]}
							       else {turn=order[0]}}}};
							       
#define awardPoint(player, to_opponent) {
	if (!to_opponent) {
		if (player == 1 || player == 2) {
	        team1++;
	    } else {
	        team2++;
	    }
    }
    else {
    	if (player == 1 || player == 2) {
	        team2++;
	    } else {
	        team1++;
	    }
    }
    if (team1 == points || team2 == points) {
        if (team1 == points) {
            won = t1;
        } else {
            won = t2;
        }
    } 
    if ((team2+team1)%2==1) {turn=call(nextServer, turn);}
};